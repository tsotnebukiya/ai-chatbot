services:
  migration:
    build:
      context: .
      dockerfile: Dockerfile.migration
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_URL=${POSTGRES_URL}
    networks:
      - my_network

  web:
    build:
      context: .
      args:
        - POSTGRES_URL=${POSTGRES_URL}
        - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
        - BETTER_AUTH_URL=${BETTER_AUTH_URL}
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - POSTGRES_URL=${POSTGRES_URL}
      - REDIS_URL=${REDIS_URL}
      - BLOB_READ_WRITE_TOKEN=${BLOB_READ_WRITE_TOKEN}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
      - BETTER_AUTH_URL=${BETTER_AUTH_URL}
    depends_on:
      db:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_started
    networks:
      - my_network

  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: ['redis-server', '--appendonly', 'yes']
    volumes:
      - redis_data:/data
    networks:
      - my_network

volumes:
  postgres_data:
  redis_data:

networks:
  my_network:
    name: my_network
    driver: bridge
